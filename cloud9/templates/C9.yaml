# /*
# Create a Cloud9 environment as a launcher platform to create another stuffs
# Based on https://github.com/awslabs/aws-cloudformation-templates
# Adapted from original file: https://github.com/awslabs/aws-cloudformation-templates/blob/master/aws/services/Cloud9/C9.yaml
# */

AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Cloud9 Environment with AWS CodeCommit Repository

Parameters:

  EC2InstanceType:
    Description: EC2 instance type on which IDE runs
    Type:        String
    Default:     t2.medium
    AllowedValues:
      - t2.small
      - t2.medium

  AutoHibernateTimeout:
    Description:  How many minutes idle before shutting down the IDE. Options, 30min, 1hr, 4hr, 1day, 1week, Never (0)
    Type:         Number
    Default:      240
    AllowedValues:
      - 30
      - 60
      - 240
      - 1440
      - 10080
      - 0

  RM:
    Description:    Cloque o seu RM (Apenas os números), esse dado será usado em algumas Tags para facilitar a identificação.
    Type:           String
    Default:        "12345"

  User:
    Description:    Especifique um nome de usuário;
    Type:           String
    Default:        "aluno"

  Password:
    NoEcho: 'true'
    Type: String
    Description: Defina sua senha
    MinLength: '8'
    MaxLength: '12'
    ConstraintDescription: A senha deve possuir entre 8 e 12 caractéres

  Region:
    Default: us-east-1 
    Description: region only 1 region supported 
    Type: String
  
  TerminateScheduled:
    Default: cron(0 5 * * ? *)
    Description: enter an Schedule expression example cron(0 18 ? * MON-FRI *) see https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html
    Type: String

Resources:

  aluno:
    Type: AWS::IAM::User
    Properties:
      LoginProfile:
        Password: !Ref 'Password'

  automation:
    Type: AWS::IAM::Group

  GroupAddition:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: !Ref 'automation'
      Users: [!Ref 'aluno']

  EC2Policies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: EC2Permission
      PolicyDocument:
        Version: "2022-02-08"
        Statement:
        - Effect: Allow
          Action: [
                "ec2:AttachVolume",
                "ec2:DeregisterImage",
                "ec2:DeleteSnapshot",
                "ec2:DescribeAddresses",
                "ec2:DescribeInstances",
                "ec2:DeleteTags",
                "ec2:DescribeInstanceAttribute",
                "ec2:CreateKeyPair",
                "ec2:DescribeRegions",
                "ec2:CreateImage",
                "ec2:CopyImage",
                "ec2:ModifyImageAttribute",
                "ec2:DescribeSnapshots",
                "ec2:DeleteVolume",
                "ec2:ModifySnapshotAttribute",
                "ec2:DescribeVolumes",
                "ec2:CreateSnapshot",
                "ec2:ModifyInstanceAttribute",
                "ec2:DescribeKeyPairs",
                "ec2:DescribeInstanceStatus",
                "ec2:DetachVolume",
                "ec2:TerminateInstances",
                "ec2:DescribeTags",
                "ec2:CreateTags",
                "ec2:RegisterImage",
                "ec2:RunInstances",
                "ec2:StopInstances",
                "ec2:DescribeInstanceCreditSpecifications",
                "ec2:AllocateAddress",
                "ec2:CreateVolume",
                "ec2:DescribeImages",
                "ec2:GetPasswordData",
                "ec2:DescribeImageAttribute",
                "ec2:DescribeInstanceTypes",
                "ec2:AssociateAddress",
                "ec2:DescribeSubnets",
                "ec2:DeleteKeyPair"
            ]
          Resource: '*'
      Groups: [!Ref 'automation']

  SecurityGroupPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: SecurityGroupPermission
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: [
            "ec2:CreateSecurityGroup",
            "ec2:DescribeSecurityGroups", 
            "ec2:DescribeSecurityGroupRules",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
            "ec2:UpdateSecurityGroupRuleDescriptionsIngress",
            "ec2:ModifySecurityGroupRules",
            "ec2:DeleteSecurityGroup",
            "ec2:DescribeSecurityGroupReferences",
            "ec2:DescribeStaleSecurityGroups"            
            ]
          Resource: '*'
      Groups: [!Ref 'automation']

  NetworkPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: NetworkPermission
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: [
            "ec2:AcceptVpcEndpointConnections",
            "ec2:AllocateAddress",
            "ec2:AssignIpv6Addresses",
            "ec2:AssignPrivateIpAddresses",
            "ec2:AssociateAddress",
            "ec2:AssociateDhcpOptions",
            "ec2:AssociateRouteTable",
            "ec2:AssociateSubnetCidrBlock",
            "ec2:AssociateVpcCidrBlock",
            "ec2:AttachInternetGateway",
            "ec2:AttachNetworkInterface",
            "ec2:CreateCarrierGateway",
            "ec2:CreateCustomerGateway",
            "ec2:CreateDefaultSubnet",
            "ec2:CreateDefaultVpc",
            "ec2:CreateDhcpOptions",
            "ec2:CreateEgressOnlyInternetGateway",
            "ec2:CreateInternetGateway",
            "ec2:CreateNatGateway",
            "ec2:CreateNetworkAcl",
            "ec2:CreateNetworkAclEntry",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:CreatePlacementGroup",
            "ec2:CreateRoute",
            "ec2:CreateRouteTable",
            "ec2:CreateSubnet",
            "ec2:CreateTags",
            "ec2:CreateVpc",
            "ec2:CreateVpcEndpoint",
            "ec2:CreateVpcEndpointConnectionNotification",
            "ec2:CreateVpcEndpointServiceConfiguration",
            "ec2:DeleteCarrierGateway",
            "ec2:DeleteEgressOnlyInternetGateway",
            "ec2:DeleteNatGateway",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DeletePlacementGroup",
            "ec2:DeleteSubnet",
            "ec2:DeleteTags",
            "ec2:DeleteVpc",
            "ec2:DeleteVpcEndpointConnectionNotifications",
            "ec2:DeleteVpcEndpointServiceConfigurations",
            "ec2:DeleteVpcEndpoints",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCarrierGateways",
            "ec2:DescribeClassicLinkInstances",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeEgressOnlyInternetGateways",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeMovingAddresses",
            "ec2:DescribeNatGateways",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInterfaceAttribute",
            "ec2:DescribeNetworkInterfacePermissions",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePlacementGroups",
            "ec2:DescribePrefixLists",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcClassicLink",
            "ec2:DescribeVpcClassicLinkDnsSupport",
            "ec2:DescribeVpcEndpointConnectionNotifications",
            "ec2:DescribeVpcEndpointConnections",
            "ec2:DescribeVpcEndpointServiceConfigurations",
            "ec2:DescribeVpcEndpointServicePermissions",
            "ec2:DescribeVpcEndpointServices",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:DescribeVpcs",
            "ec2:DescribePublicIpv4Pools",
            "ec2:DescribeIpv6Pools",
            "ec2:DetachInternetGateway",
            "ec2:DetachNetworkInterface",
            "ec2:DisableVpcClassicLinkDnsSupport",
            "ec2:DisassociateAddress",
            "ec2:DisassociateRouteTable",
            "ec2:DisassociateSubnetCidrBlock",
            "ec2:DisassociateVpcCidrBlock",
            "ec2:EnableVpcClassicLinkDnsSupport",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:ModifySecurityGroupRules",
            "ec2:ModifySubnetAttribute",
            "ec2:ModifyVpcAttribute",
            "ec2:ModifyVpcEndpoint",
            "ec2:ModifyVpcEndpointConnectionNotification",
            "ec2:ModifyVpcEndpointServiceConfiguration",
            "ec2:ModifyVpcEndpointServicePermissions",
            "ec2:ModifyVpcPeeringConnectionOptions",
            "ec2:ModifyVpcTenancy",
            "ec2:MoveAddressToVpc",
            "ec2:RejectVpcEndpointConnections",
            "ec2:ReleaseAddress",
            "ec2:ReplaceNetworkAclAssociation",
            "ec2:ReplaceNetworkAclEntry",
            "ec2:ReplaceRoute",
            "ec2:ReplaceRouteTableAssociation",
            "ec2:ResetNetworkInterfaceAttribute",
            "ec2:RestoreAddressToClassic",
            "ec2:UnassignIpv6Addresses",
            "ec2:UnassignPrivateIpAddresses",
            "elasticloadbalancing:*"
            ]
          Resource: '*'
      Groups: [!Ref 'automation']

  BucketPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: BucketPermission
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: ["s3:*"]
          Resource: '*'
      Groups: [!Ref 'automation']
  
  FiapKeys:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref 'aluno'

  C9IDE:
    Type: 'AWS::Cloud9::EnvironmentEC2'
    Properties:
      Name: !Sub '${User}-rm-${RM}-Cloud9-IDE'
      Description: !Sub '${User} Cloud9 IDE'
      AutomaticStopTimeMinutes: !Ref 'AutoHibernateTimeout'
      InstanceType: !Ref 'EC2InstanceType'

  TerminateEC2Instances:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.8
      Role: !GetAtt Role.Arn
      Handler: index.lambda_handler
      Timeout: 60
      Environment:
         Variables:
          Region: !Ref Region
      Code:
        ZipFile: |
          import json
          import os
          import boto3

          def lambda_handler(event, context):
            region = os.environ['Region']
            client = boto3.client('ec2', region_name=region)

            response = client.describe_instances(
                Filters=[
                  {'Name': 'tag:env', 'Values': ['lab'] },
                  {'Name': 'instance-state-name', 'Values': ['running']}
                ],
            )

            instance_ids = list()

            if response['ResponseMetadata']['HTTPStatusCode'] == 200:
                for reservation in response["Reservations"]:
                  for each in reservation["Instances"]:
                    instance_ids.append(each['InstanceId'])

                if not instance_ids:
                  print('Nothing to do here.')
                else:
                    try:
                        print("instances marked to be removed: ", instance_ids)
                        client.terminate_instances(InstanceIds = instance_ids)
                    except Exception as e:
                        print("Error in process: " + str(e))
            
            return {
              'statusCode': 200,
              'body': json.dumps('Terminated instances: ' + str(instance_ids))
            }
      Description: Function that Terminates instances
  permissionForEventsToInvokeTerminateEC2Instances:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt TerminateEC2Instances.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      "SourceArn" : !GetAtt TerminateScheduledRule.Arn

  Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: Ec2permissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                - "ec2:TerminateInstances"
                - "ec2:DescribeInstances"
                - "ec2:DescribeInstanceStatus"
                Resource: '*'
                

  TerminateScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "ScheduledRule"
      ScheduleExpression: !Ref TerminateScheduled
      State: "ENABLED"
      Targets: 
        - 
          Arn: !GetAtt TerminateEC2Instances.Arn
          Id: "TargetFunctionV1"

Outputs:

  Cloud9URL:
    Description: Cloud9 Environment
    Value:
      Fn::Join:
      - ''
      - - !Sub https://${AWS::Region}.console.aws.amazon.com/cloud9/ide/
        - !Ref 'C9IDE'

  AwsAccessKeyID:
    Value: !Ref 'FiapKeys'
    Description: AWSAccessKeyId of new user

  AwsSecretAccessKey:
    Value: !GetAtt [FiapKeys, SecretAccessKey]
    Description: AWSSecretAccessKey of new user